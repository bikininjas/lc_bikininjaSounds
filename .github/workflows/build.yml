name: Build V3 - Version and release on PR

on:
  workflow_dispatch:
  push:
    branches-ignore:
      - 'master'

jobs:
  build:
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          filter: tree:0

      - name: Check if PR exists
        id: check-pr
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}
          script: |
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head: `${context.repo.owner}:${context.ref.replace('refs/heads/', '')}`
            });
            
            if (prs.length > 0) {
              core.setOutput('pr-number', prs[0].number);
              core.setOutput('pr-exists', 'true');
              console.log(`Found existing PR #${prs[0].number}`);
            } else {
              core.setOutput('pr-exists', 'false');
              console.log('No existing PR found');
            }

      - name: Create Pull Request
        if: steps.check-pr.outputs.pr-exists == 'false'
        id: cpr
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}
          script: |
            const branch = context.ref.replace('refs/heads/', '');
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Changes from ${branch}`,
              head: branch,
              base: 'master',
              body: `Automated PR from branch ${branch}`
            });
            core.setOutput('pr-number', pr.number);
            console.log(`Created PR #${pr.number}`);

      - name: Label changes
        if: steps.check-pr.outputs.pr-number || steps.cpr.outputs.pr-number
        uses: actions/labeler@v6
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          pr-number: ${{ steps.check-pr.outputs.pr-number || steps.cpr.outputs.pr-number }}
          sync-labels: true

      - name: Get PR labels
        if: steps.check-pr.outputs.pr-number || steps.cpr.outputs.pr-number
        id: pr-labels
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = ${{ steps.check-pr.outputs.pr-number || steps.cpr.outputs.pr-number }};
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });
            const labels = pr.data.labels.map(label => label.name);
            core.setOutput('labels', JSON.stringify(labels));
            core.setOutput('has-audio', labels.includes('audio'));
            core.setOutput('has-cicd', labels.includes('cicd'));
            core.setOutput('should-release', labels.includes('audio') || labels.includes('cicd'));
            
      - name: Bump version and push tag
        if: steps.pr-labels.outputs.should-release == 'true'
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          release_branches: .*
          default_bump: patch
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag_prefix: 'v'
          dry_run: false
          
      - name: Release Changelog Builder
        if: steps.pr-labels.outputs.should-release == 'true'
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v5
        with:
          outputFile: "CHANGELOG.MD"
          token: ${{ secrets.GITHUB_TOKEN }}
          mode: "COMMIT"
          configurationJson: |
            {
              "template": "#{{CHANGELOG}}\n\n<details>\n<summary>Uncategorized</summary>\n\n#{{UNCATEGORIZED}}\n</details>",
              "categories": [
                {
                  "title": "## üéπ Audio",
                  "labels": ["audio", "sound", "sounds"]
                },
                {
                  "title": "## üêõ Fixes",
                  "labels": ["fix", "fixes"]
                },
                {
                  "title": "## üî© CI/CD (you don't care)",
                  "labels": ["ci", "cicd", "cd"]
                },
                {
                  "key": "tests",
                  "title": "## üß™ Tests",
                  "labels": ["test", "tests"]
                }
              ],
              "label_extractor": [
                {
                  "pattern": "^(build|chore|ci|cicd|cd|docs|feat|fix|fixes|perf|refactor|revert|style|test|tests|audio|sound|sounds){1}(\\([\\w\\-\\.]+\\))?(!)?: ([\\w ])+([\\s\\S]*)",
                  "target": "$1"
                }
              ]
            }
            
      - name: See CHANGELOG
        if: steps.pr-labels.outputs.should-release == 'true'
        run: |
          echo "${{ steps.changelog.outputs.changelog }}"

      - name: Release
        if: steps.pr-labels.outputs.should-release == 'true'
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ steps.tag_version.outputs.new_version }}
          tag_name: ${{ steps.tag_version.outputs.new_version }}
          body: ${{ steps.changelog.outputs.changelog }}
          body_path: CHANGELOG.MD
          token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: false
          make_latest: true
          
      # - name: Enable Auto-Merge on Pull Request
      #   if: steps.pr-labels.outputs.has-cicd == 'true'
      #   uses: peter-evans/enable-pull-request-automerge@v3
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     pull-request-number: ${{ steps.check-pr.outputs.pr-number || steps.cpr.outputs.pr-number }}
      #     merge-method: squash
      #     # This will only merge after all required status checks pass